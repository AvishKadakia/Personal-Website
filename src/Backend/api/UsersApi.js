/**
 * FormDesk Backend API Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import InlineResponse200 from "../model/InlineResponse200";
import LoginRequestBody from "../model/LoginRequestBody";
import LoginResponseBody from "../model/LoginResponseBody";
import Users from "../model/Users";
import Usersid from "../model/Usersid";

/**
 * Users service.
 * @module api/UsersApi
 * @version 1.0.0
 */
export default class UsersApi {
  /**
   * Constructs a new UsersApi.
   * @alias module:api/UsersApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Callback function to receive the result of the createUsers operation.
   * @callback module:api/UsersApi~createUsersCallback
   * @param {String} error Error message, if any.
   * @param {module:model/InlineResponse200} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Create a new user for an organization
   * @param {module:api/UsersApi~createUsersCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/InlineResponse200}
   */
  createUsers(opts, callback) {
    let postBody = opts["body"];

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["UserAuth"];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = InlineResponse200;

    return this.apiClient.callApi(
      "/users",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the deleteUser operation.
   * @callback module:api/UsersApi~deleteUserCallback
   * @param {String} error Error message, if any.
   * @param {module:model/InlineResponse200} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Delete can existing user in an organization
   * @param {module:api/UsersApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/InlineResponse200}
   */
  deleteUser(emailid, callback) {
    let postBody = null;

    let pathParams = {
      emailid: encodeURI(emailid)
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["UserAuth"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = InlineResponse200;

    return this.apiClient.callApi(
      "/user/{emailid}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the login operation.
   * @callback module:api/UsersApi~loginCallback
   * @param {String} error Error message, if any.
   * @param {module:model/LoginResponseBody} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Login API
   * @param {module:api/UsersApi~loginCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/LoginResponseBody}
   */
  login(opts, callback) {
    let postBody = opts["body"];

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json"];
    let accepts = ["application/json"];
    let returnType = LoginResponseBody;

    return this.apiClient.callApi(
      "/login",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the readUsers operation.
   * @callback module:api/UsersApi~readUsersCallback
   * @param {String} error Error message, if any.
   * @param {Array.<module:model/Usersid>} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Get users from the loggedin user&#x27;s organization
   * @param {module:api/UsersApi~readUsersCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link Array.<module:model/Usersid>}
   */
  readUsers(callback) {
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["UserAuth"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = [Usersid];

    return this.apiClient.callApi(
      "/users",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
}
