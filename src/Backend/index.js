/**
 * FormDesk Backend API Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "./ApiClient";
import Body from "./model/Body";
import Body1 from "./model/Body1";
import InlineResponse200 from "./model/InlineResponse200";
import InlineResponse2001 from "./model/InlineResponse2001";
import LoginRequestBody from "./model/LoginRequestBody";
import LoginResponseBody from "./model/LoginResponseBody";
import Organization from "./model/Organization";
import Users from "./model/Users";
import Usersid from "./model/Usersid";
import EmailsApi from "./api/EmailsApi";
import FilesApi from "./api/FilesApi";
import OrganizationApi from "./api/OrganizationApi";
import SuperAdminApi from "./api/SuperAdminApi";
import UsersApi from "./api/UsersApi";

/**
 * Object.<br>
 * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
 * <p>
 * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
 * <pre>
 * var FormDeskBackendApiDocumentation = require('index'); // See note below*.
 * var xxxSvc = new FormDeskBackendApiDocumentation.XxxApi(); // Allocate the API class we're going to use.
 * var yyyModel = new FormDeskBackendApiDocumentation.Yyy(); // Construct a model instance.
 * yyyModel.someProperty = 'someValue';
 * ...
 * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
 * ...
 * </pre>
 * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
 * and put the application logic within the callback function.</em>
 * </p>
 * <p>
 * A non-AMD browser application (discouraged) might do something like this:
 * <pre>
 * var xxxSvc = new FormDeskBackendApiDocumentation.XxxApi(); // Allocate the API class we're going to use.
 * var yyy = new FormDeskBackendApiDocumentation.Yyy(); // Construct a model instance.
 * yyyModel.someProperty = 'someValue';
 * ...
 * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
 * ...
 * </pre>
 * </p>
 * @module index
 * @version 1.0.0
 */
export {
  /**
   * The ApiClient constructor.
   * @property {module:ApiClient}
   */
  ApiClient,
  /**
   * The Body model constructor.
   * @property {module:model/Body}
   */
  Body,
  /**
   * The Body1 model constructor.
   * @property {module:model/Body1}
   */
  Body1,
  /**
   * The InlineResponse200 model constructor.
   * @property {module:model/InlineResponse200}
   */
  InlineResponse200,
  /**
   * The InlineResponse2001 model constructor.
   * @property {module:model/InlineResponse2001}
   */
  InlineResponse2001,
  /**
   * The LoginRequestBody model constructor.
   * @property {module:model/LoginRequestBody}
   */
  LoginRequestBody,
  /**
   * The LoginResponseBody model constructor.
   * @property {module:model/LoginResponseBody}
   */
  LoginResponseBody,
  /**
   * The Organization model constructor.
   * @property {module:model/Organization}
   */
  Organization,
  /**
   * The Users model constructor.
   * @property {module:model/Users}
   */
  Users,
  /**
   * The Usersid model constructor.
   * @property {module:model/Usersid}
   */
  Usersid,
  /**
   * The EmailsApi service constructor.
   * @property {module:api/EmailsApi}
   */
  EmailsApi,
  /**
   * The FilesApi service constructor.
   * @property {module:api/FilesApi}
   */
  FilesApi,
  /**
   * The OrganizationApi service constructor.
   * @property {module:api/OrganizationApi}
   */
  OrganizationApi,
  /**
   * The SuperAdminApi service constructor.
   * @property {module:api/SuperAdminApi}
   */
  SuperAdminApi,
  /**
   * The UsersApi service constructor.
   * @property {module:api/UsersApi}
   */
  UsersApi
};
